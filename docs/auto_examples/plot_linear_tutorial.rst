
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_linear_tutorial.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_linear_tutorial.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_linear_tutorial.py:


Linear Classification Quickstart Tutorial
=========================================

.. role:: py(code)
   :language: python3

This guide will take you through how LibMultiLabel can
be used to train a linear classifier in python scripts.

Getting the Dataset
^^^^^^^^^^^^^^^^^^^

For this guide, we will use the rcv1 dataset, which is
a collection of news articles.
On the command line::

    mkdir -p data/rcv1
    wget https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel/rcv1_topics_train.txt.bz2 -O data/rcv1/train.txt.bz2
    wget https://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multilabel/rcv1_topics_test.txt.bz2 -O data/rcv1/test.txt.bz2
    bzip2 -d data/rcv1/*.bz2

Each line of the dataset contains an ID, its labels and the
text, all seperated by tabs. For example::

    2286    E11 ECAT M11 M12 MCAT   recov recov recov recov excit excit bring mexic ...

See `data formats <../cli/ov_data_format.html#dataset-formats>`_ for a complete explanation of the format.

The Python Script
^^^^^^^^^^^^^^^^^

For this guide, we will only need the linear module:

.. GENERATED FROM PYTHON SOURCE LINES 35-38

.. code-block:: default


    import libmultilabel.linear as linear


.. GENERATED FROM PYTHON SOURCE LINES 39-40

To start, we need to read and preprocess the input data:

.. GENERATED FROM PYTHON SOURCE LINES 40-46

.. code-block:: default


    preprocessor = linear.Preprocessor(data_format='txt')

    datasets = preprocessor.load_data('data/rcv1/train.txt',
                                      'data/rcv1/test.txt')


.. GENERATED FROM PYTHON SOURCE LINES 47-63

The preprocessor handles many issues such as: mapping
the labels into indices and transforming textual data to
numerical data. The loaded dataset has the structure::

    {
        'train': {
            'x': # training features
            'y': # training labels
        },
        'test': {
            'x': # test features
            'y': # test labels
        },
    }

Next we train the model:

.. GENERATED FROM PYTHON SOURCE LINES 63-68

.. code-block:: default


    model = linear.train_1vsrest(datasets['train']['y'],
                                 datasets['train']['x'],
                                 '')


.. GENERATED FROM PYTHON SOURCE LINES 69-74

The third argument is the options string for
`LibLinear <https://www.csie.ntu.edu.tw/~cjlin/liblinear/>`_.
We may leave it as the default for now.

Once we have the model, we may predict with it:

.. GENERATED FROM PYTHON SOURCE LINES 74-77

.. code-block:: default


    preds = linear.predict_values(model, datasets['test']['x'])


.. GENERATED FROM PYTHON SOURCE LINES 78-87

:py:`preds` holds the decision values, i.e. the raw values
outputted by the model. To transform it into predictions,
the simplest way is to take the positive values as
the labels predicted to be associated with the sample,
i.e. :py:`preds > 0`.

To see how well we performed, we may want to check various
metrics with the test set.
For that we may use:

.. GENERATED FROM PYTHON SOURCE LINES 87-92

.. code-block:: default


    metrics = linear.get_metrics(metric_threshold=0,
                                 monitor_metrics=['Macro-F1', 'Micro-F1', 'P@1', 'P@3', 'P@5'],
                                 num_classes=datasets['test']['y'].shape[1])


.. GENERATED FROM PYTHON SOURCE LINES 93-96

This creates the set of metrics we wish to see.
Since the dataset we loaded are stored as :py:`scipy.sparse.csr_matrix`,
we need to transform them to :py:`np.array` before we can compute the metrics:

.. GENERATED FROM PYTHON SOURCE LINES 96-99

.. code-block:: default


    target = datasets['test']['y'].toarray()


.. GENERATED FROM PYTHON SOURCE LINES 100-101

Finally, we compute and print the metrics:

.. GENERATED FROM PYTHON SOURCE LINES 101-105

.. code-block:: default


    metrics.update(preds, target)
    print(metrics.compute())


.. GENERATED FROM PYTHON SOURCE LINES 106-111

The results will look similar to::

    {'Macro-F1': 0.5171960144875225, 'Micro-F1': 0.8008124243391698, 'P@1': 0.9573153795447128, 'P@3': 0.799074151109632, 'P@5': 0.5579924865442584}

Get the full source code `here <https://github.com/ASUS-AICS/LibMultiLabel/tree/master/docs/examples/linear_quickstart.py>`_.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_plot_linear_tutorial.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_linear_tutorial.py <plot_linear_tutorial.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_linear_tutorial.ipynb <plot_linear_tutorial.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
