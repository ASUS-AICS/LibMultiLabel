# data
training_file: data/MIMIC-50/train.txt
val_file: data/MIMIC-50/valid.txt
test_file: data/MIMIC-50/test.txt
data_name: MIMIC-50
min_vocab_freq: 3
max_seq_length: 2500
include_test_labels: true
# Follow https://github.com/jamesmullenbach/caml-mimic/blob/master/datasets.py#L45
# to remove training and validation instances that have no labels.
remove_no_label_data: true
add_special_tokens: false

# train
seed: 1337
epochs: 100
batch_size: 16
optimizer: adam
learning_rate: ['grid_search', [0.01, 0.003, 0.001, 0.0003, 0.0001]]
momentum: 0
weight_decay: 0
patience: 10
early_stopping_metric: RP@5
shuffle: true

# eval
eval_batch_size: 1
monitor_metrics: ['Micro-F1', 'Macro-F1', 'Another-Macro-F1', 'P@1', 'P@3', 'P@5', 'RP@5']
val_metric: P@5

# model
model_name: BiGRULWAN
loss_function: binary_cross_entropy_with_logits
init_weight: ['grid_search', ['kaiming_uniform', 'xavier_uniform']]
network_config:
  embed_dropout: ['grid_search', [0, 0.2, 0.4, 0.6, 0.8]]
  encoder_dropout: ['grid_search', [0, 0.2, 0.4, 0.6, 0.8]]
  rnn_dim: ['grid_search', [256, 512, 1024, 2048]]
  rnn_layers: ['grid_search', [1, 2]]

# pretrained vocab / embeddings
vocab_file: data/MIMIC-50/vocab.csv
embed_file: data/MIMIC-50/processed_full.embed
normalize_embed: true

# hyperparamter search
search_alg: basic_variant
embed_cache_dir: null
num_samples: 1
scheduler: null
# Uncomment the following lines to enable the ASHAScheduler.
# See the documentation here: https://docs.ray.io/en/latest/tune/api_docs/schedulers.html#asha-tune-schedulers-ashascheduler
# scheduler:
#   time_attr: training_iteration
#   max_t: 100  # the maximum epochs to run for each config (parameter R in the ASHA paper)
#   grace_period: 10  # the minimum epochs to run for each config (parameter r in the ASHA paper)
#   reduction_factor: 3  # reduce the number of configuration to floor(1/reduction_factor) each round of successive halving (called rung in ASHA paper)
#   brackets: 1  # number of brackets. A smaller bracket index (parameter s in the ASHA paper) means earlier stopping (i.e., less total resources used)

# other parameters specified in main.py::get_args
checkpoint_path: null
cpu: false
data_workers: 4
eval: false
limit_train_batches: 1.0
limit_val_batches: 1.0
limit_test_batches: 1.0
metric_threshold: 0.5
result_dir: runs
save_k_predictions: 0
silent: true
val_size: 0.2
